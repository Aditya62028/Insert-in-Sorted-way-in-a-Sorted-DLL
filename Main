import java.util.*;
class Node {
    int data;
    Node prev, next;
    Node(int data) {
        this.data = data;
        this.prev = this.next = null;
    }
}
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        sc.nextLine(); 
        while (t-- > 0) {
            String input = sc.nextLine(); 
            String[] values = input.split(" ");
            Node head = null, tail = null;
            for (String value : values) {
                int x = Integer.parseInt(value);
                if (head == null) {
                    head = new Node(x);
                    tail = head;
                } else {
                    tail.next = new Node(x);
                    tail.next.prev = tail;
                    tail = tail.next;
                }
            }
            int valueToInsert = sc.nextInt();
            if (sc.hasNextLine()) {
                sc.nextLine(); 
            }
            Solution obj = new Solution();
            head = obj.sortedInsert(head, valueToInsert);
            if (!validate(head))
                System.out.println("Invalid DLL");
            else
                printList(head);

            System.out.println("~");
        }
        sc.close();
    }
    public static boolean validate(Node head) {
        Node current = head;
        while (current.next != null) {
            if (current.next.prev != current) {
                return false;
            }
            current = current.next;
        }
        return true;
    }
    public static void printList(Node head) {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }
}
class Solution {
    public Node sortedInsert(Node head, int x) {
        Node insert= new Node(x);
        Node curr=head;
        if(x<head.data){
              insert.next=head;
               head=insert;
               return head;
          }
        while(curr.next!=null){
          if(curr.data<=x && curr.next.data>=x){
                insert.next=curr.next;
                insert.prev=curr;
                curr.next.prev=insert;
                curr.next=insert;
                return head;
          }
          curr=curr.next;
        } 
        if(curr.data<=x){
               insert.next=curr.next;
               insert.prev=curr;
               curr.next= insert;
               return head;
          } 
        return head;
    }
}
